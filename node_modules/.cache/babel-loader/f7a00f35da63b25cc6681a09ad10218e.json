{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReactJS\\\\tabledisplay\\\\src\\\\components\\\\Table\\\\ItemRow\\\\ItemRow.js\";\nimport React, { Component } from \"react\";\nimport classes from \"../../Button/Button.css\";\nimport Input from \"../../Input/Input\";\n\nclass ItemRow extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tablerow: {\n        itemname: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"itemvalue1\",\n              displayValue: \"itemvalue1\"\n            }, {\n              value: \"itemvalue2\",\n              displayValue: \"itemvalue2\"\n            }, {\n              value: \"itemvalue3\",\n              displayValue: \"itemvalue3\"\n            }, {\n              value: \"itemvalue4\",\n              displayValue: \"itemvalue4\"\n            }]\n          },\n          value: \"\",\n          validation: {},\n          valid: true\n        },\n        materialfees: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"0\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        packingfees: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"0\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        unpackingfees: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"0\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      trowIsValid: false,\n      loading: false\n    };\n\n    this.renderFooter = () => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleItemAdd,\n        className: classes.Button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Add Item\")));\n    };\n\n    this.handleItemAdd = () => {\n      const colomns = this.colomns.map(colomn => {\n        return {\n          name: colomn.heading,\n          inputType: colomn.inputType,\n          value: \"\"\n        };\n      });\n      const newItem = {\n        key: \"asksakdaskd\",\n        colomns: colomns\n      };\n      var rows = this.state.rows;\n      rows.push(newItem);\n      this.setState({\n        rows: rows\n      }); //  this.setState({ rows: [...this.state.rows, newItem] });\n    };\n\n    this.renderInput = () => {\n      const trowElementsArray = [];\n\n      for (let key in this.state.tablerow) {\n        trowElementsArray.push({\n          id: key,\n          config: this.state.tablerow[key]\n        });\n      }\n\n      let trow = React.createElement(React.Fragment, null, trowElementsArray.map(trowElement => React.createElement(\"td\", {\n        className: classes.td,\n        key: trowElement.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Input, {\n        key: trowElement.id,\n        elementType: trowElement.config.elementType,\n        elementConfig: trowElement.config.elementConfig,\n        value: trowElement.config.value,\n        changed: event => this.inputChangedHandler(event, trowElement.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: event => this.removeRow(event, trow),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"X\")));\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, trow);\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \" \", this.renderInput(), \" \", this.renderFooter());\n  }\n\n}\n\nexport default ItemRow;","map":{"version":3,"sources":["C:/ReactJS/tabledisplay/src/components/Table/ItemRow/ItemRow.js"],"names":["React","Component","classes","Input","ItemRow","state","tablerow","itemname","elementType","elementConfig","options","value","displayValue","validation","valid","materialfees","type","placeholder","required","touched","packingfees","minLength","maxLength","isNumeric","unpackingfees","trowIsValid","loading","renderFooter","handleItemAdd","Button","colomns","map","colomn","name","heading","inputType","newItem","key","rows","push","setState","renderInput","trowElementsArray","id","config","trow","trowElement","td","event","inputChangedHandler","removeRow","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport classes from \"../../Button/Button.css\";\r\nimport Input from \"../../Input/Input\";\r\n\r\nclass ItemRow extends Component {\r\n  state = {\r\n    tablerow: {\r\n      itemname: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"itemvalue1\", displayValue: \"itemvalue1\" },\r\n            { value: \"itemvalue2\", displayValue: \"itemvalue2\" },\r\n            { value: \"itemvalue3\", displayValue: \"itemvalue3\" },\r\n            { value: \"itemvalue4\", displayValue: \"itemvalue4\" }\r\n          ]\r\n        },\r\n        value: \"\",\r\n        validation: {},\r\n        valid: true\r\n      },\r\n      materialfees: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"0\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      packingfees: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"0\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      unpackingfees: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"0\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    trowIsValid: false,\r\n    loading: false\r\n  };\r\n\r\nrenderFooter = () => {\r\n     return  <tr><td><button type=\"button\" onClick={this.handleItemAdd} className={classes.Button}>Add Item</button></td></tr>\r\n  };\r\n\r\n\r\n\r\nhandleItemAdd = () => {\r\n    const colomns = this.colomns.map(colomn => {\r\n      return {\r\n        name: colomn.heading,\r\n        inputType: colomn.inputType,\r\n        value: \"\"\r\n      };\r\n    });\r\n\r\n    const newItem = {\r\n      key: \"asksakdaskd\",\r\n      colomns: colomns\r\n    };\r\nvar rows = this.state.rows\r\n        rows.push(newItem)\r\n        this.setState({rows: rows})\r\n      \r\n //  this.setState({ rows: [...this.state.rows, newItem] });\r\n  };\r\n  renderInput = () => {\r\n        const trowElementsArray = [];\r\n    for (let key in this.state.tablerow) {\r\n      trowElementsArray.push({\r\n        id: key,\r\n        config: this.state.tablerow[key]\r\n      });\r\n    }\r\n    let trow = (\r\n     <>\r\n        {trowElementsArray.map(trowElement => (\r\n          <td className={classes.td} key={trowElement.id}>\r\n            <Input\r\n              key={trowElement.id}\r\n              elementType={trowElement.config.elementType}\r\n              elementConfig={trowElement.config.elementConfig}\r\n              value={trowElement.config.value}\r\n              changed={(event) => this.inputChangedHandler(event, trowElement.id)}\r\n            />\r\n          </td>\r\n        ))}\r\n        <td>\r\n          <button onClick={event => this.removeRow(event, trow)}>X</button>\r\n        </td>\r\n      </>\r\n    );\r\n    return ( <tr>{trow}</tr>);\r\n  };\r\n\r\n  render() {\r\n  \r\n    return(<span> {this.renderInput()} {this.renderFooter()}</span>);\r\n  }\r\n}\r\nexport default ItemRow;\r\n"]},"metadata":{},"sourceType":"module"}