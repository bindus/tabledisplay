{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReactJS\\\\tabledisplay\\\\src\\\\components\\\\Table\\\\ItemTable\\\\ItemRow\\\\ItemRow.js\";\nimport React, { Component } from 'react';\nimport classes from '../../../Button/Button.css';\nimport Input from '../../../Input/Input';\n\nfunction removeRow(event, item) {\n  var array = [...this.state.rows]; // make a new copy of array instead of mutating the same array directly. \n\n  var index = array.indexOf(item);\n  array.splice(index, 1);\n  this.setState({\n    people: array\n  });\n}\n\nclass ItemRow extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tablerow: {\n        itemname: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'itemvalue1',\n              displayValue: 'itemvalue1'\n            }, {\n              value: 'itemvalue2',\n              displayValue: 'itemvalue2'\n            }, {\n              value: 'itemvalue3',\n              displayValue: 'itemvalue3'\n            }, {\n              value: 'itemvalue4',\n              displayValue: 'itemvalue4'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        },\n        materialfees: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: '0'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        packingfees: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: '0'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        unpackingfees: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: '0'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      trowIsValid: false,\n      loading: false\n    };\n  }\n\n  render() {\n    const trowElementsArray = [];\n\n    for (let key in this.state.tablerow) {\n      trowElementsArray.push({\n        id: key,\n        config: this.state.tablerow[key]\n      });\n    }\n\n    let trow = React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, trowElementsArray.map(trowElement => React.createElement(\"td\", {\n      className: classes.td,\n      key: trowElement.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Input, {\n      key: trowElement.id,\n      elementType: trowElement.config.elementType,\n      elementConfig: trowElement.config.elementConfig,\n      value: trowElement.config.value,\n      invalid: !trowElement.config.valid,\n      shouldValidate: trowElement.config.validation,\n      touched: trowElement.config.touched,\n      changed: event => this.inputChangedHandler(event, trowElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), \" \")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: event => this.removeRow(event, trow),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"X\")));\n    return React.createElement(React.Fragment, null, trow);\n  }\n\n}\n\nexport default ItemRow;","map":{"version":3,"sources":["C:/ReactJS/tabledisplay/src/components/Table/ItemTable/ItemRow/ItemRow.js"],"names":["React","Component","classes","Input","removeRow","event","item","array","state","rows","index","indexOf","splice","setState","people","ItemRow","tablerow","itemname","elementType","elementConfig","options","value","displayValue","validation","valid","materialfees","type","placeholder","required","touched","packingfees","minLength","maxLength","isNumeric","unpackingfees","trowIsValid","loading","render","trowElementsArray","key","push","id","config","trow","map","trowElement","td","inputChangedHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;;AAEA,SAASC,SAAT,CAAoBC,KAApB,EAA0BC,IAA1B,EAAiC;AAC/B,MAAIC,KAAK,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWC,IAAf,CAAZ,CAD+B,CACG;;AAClC,MAAIC,KAAK,GAAGH,KAAK,CAACI,OAAN,CAAcL,IAAd,CAAZ;AACAC,EAAAA,KAAK,CAACK,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACA,OAAKG,QAAL,CAAc;AAACC,IAAAA,MAAM,EAAEP;AAAT,GAAd;AACC;;AACH,MAAMQ,OAAN,SAAsBd,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAG5BO,KAH4B,GAGpB;AACJQ,MAAAA,QAAQ,EAAE;AACNC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,WAAW,EAAE,QADP;AAENC,UAAAA,aAAa,EAAE;AACXC,YAAAA,OAAO,EAAE,CACL;AAACC,cAAAA,KAAK,EAAE,YAAR;AAAsBC,cAAAA,YAAY,EAAE;AAApC,aADK,EAEL;AAACD,cAAAA,KAAK,EAAE,YAAR;AAAsBC,cAAAA,YAAY,EAAE;AAApC,aAFK,EAGL;AAACD,cAAAA,KAAK,EAAE,YAAR;AAAsBC,cAAAA,YAAY,EAAE;AAApC,aAHK,EAIL;AAACD,cAAAA,KAAK,EAAE,YAAR;AAAsBC,cAAAA,YAAY,EAAE;AAApC,aAJK;AADE,WAFT;AAUND,UAAAA,KAAK,EAAE,EAVD;AAWNE,UAAAA,UAAU,EAAE,EAXN;AAYNC,UAAAA,KAAK,EAAE;AAZD,SADJ;AAeNC,QAAAA,YAAY,EAAE;AACVP,UAAAA,WAAW,EAAE,OADH;AAEVC,UAAAA,aAAa,EAAE;AACXO,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFL;AAMVN,UAAAA,KAAK,EAAE,EANG;AAOVE,UAAAA,UAAU,EAAE;AACRK,YAAAA,QAAQ,EAAE;AADF,WAPF;AAUVJ,UAAAA,KAAK,EAAE,KAVG;AAWVK,UAAAA,OAAO,EAAE;AAXC,SAfR;AA4BNC,QAAAA,WAAW,EAAE;AACTZ,UAAAA,WAAW,EAAE,OADJ;AAETC,UAAAA,aAAa,EAAE;AACXO,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFN;AAMTN,UAAAA,KAAK,EAAE,EANE;AAOTE,UAAAA,UAAU,EAAE;AACRK,YAAAA,QAAQ,EAAE,IADF;AAERG,YAAAA,SAAS,EAAE,CAFH;AAGRC,YAAAA,SAAS,EAAE,CAHH;AAIRC,YAAAA,SAAS,EAAE;AAJH,WAPH;AAaTT,UAAAA,KAAK,EAAE,KAbE;AAcTK,UAAAA,OAAO,EAAE;AAdA,SA5BP;AA4CNK,QAAAA,aAAa,EAAE;AACXhB,UAAAA,WAAW,EAAE,OADF;AAEXC,UAAAA,aAAa,EAAE;AACXO,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFJ;AAMXN,UAAAA,KAAK,EAAE,EANI;AAOXE,UAAAA,UAAU,EAAE;AACRK,YAAAA,QAAQ,EAAE;AADF,WAPD;AAUXJ,UAAAA,KAAK,EAAE,KAVI;AAWXK,UAAAA,OAAO,EAAE;AAXE;AA5CT,OADN;AA2DJM,MAAAA,WAAW,EAAE,KA3DT;AA4DJC,MAAAA,OAAO,EAAE;AA5DL,KAHoB;AAAA;;AAmE9BC,EAAAA,MAAM,GAAG;AAEN,UAAMC,iBAAiB,GAAG,EAA1B;;AACG,SAAK,IAAIC,GAAT,IAAgB,KAAK/B,KAAL,CAAWQ,QAA3B,EAAqC;AACjCsB,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKlC,KAAL,CAAWQ,QAAX,CAAoBuB,GAApB;AAFW,OAAvB;AAIH;;AACD,QAAII,IAAI,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACML,iBAAiB,CAACM,GAAlB,CAAsBC,WAAW,IAChC;AAAI,MAAA,SAAS,EAAE3C,OAAO,CAAC4C,EAAvB;AAA2B,MAAA,GAAG,EAAGD,WAAW,CAACJ,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEI,WAAW,CAACJ,EADrB;AAEI,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBxB,WAFpC;AAGI,MAAA,aAAa,EAAE2B,WAAW,CAACH,MAAZ,CAAmBvB,aAHtC;AAII,MAAA,KAAK,EAAE0B,WAAW,CAACH,MAAZ,CAAmBrB,KAJ9B;AAKI,MAAA,OAAO,EAAE,CAACwB,WAAW,CAACH,MAAZ,CAAmBlB,KALjC;AAMI,MAAA,cAAc,EAAEqB,WAAW,CAACH,MAAZ,CAAmBnB,UANvC;AAOI,MAAA,OAAO,EAAEsB,WAAW,CAACH,MAAZ,CAAmBb,OAPhC;AAQI,MAAA,OAAO,EAAGxB,KAAD,IAAW,KAAK0C,mBAAL,CAAyB1C,KAAzB,EAAgCwC,WAAW,CAACJ,EAA5C,CARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,MADD,CADN,EAaK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAQ,MAAA,OAAO,EAAGpC,KAAD,IAAW,KAAKD,SAAL,CAAeC,KAAf,EAAsBsC,IAAtB,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAJ,CAbL,CADH;AAmBC,WACG,0CAEKA,IAFL,CADH;AAON;;AAtG6B;;AAyGhC,eAAe5B,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from '../../../Button/Button.css';\r\nimport Input from '../../../Input/Input';\r\n\r\nfunction removeRow (event,item)  {  \r\n  var array = [...this.state.rows]; // make a new copy of array instead of mutating the same array directly. \r\n  var index = array.indexOf(item)\r\n  array.splice(index, 1);\r\n  this.setState({people: array});\r\n  }\r\nclass ItemRow extends Component {\r\n\r\n\r\n    state = {\r\n        tablerow: {\r\n            itemname: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'itemvalue1', displayValue: 'itemvalue1'},\r\n                        {value: 'itemvalue2', displayValue: 'itemvalue2'},\r\n                        {value: 'itemvalue3', displayValue: 'itemvalue3'},\r\n                        {value: 'itemvalue4', displayValue: 'itemvalue4'}\r\n                    ]\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: true\r\n            },\r\n            materialfees: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: '0'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            packingfees: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: '0'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            unpackingfees: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: '0'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n            },                    \r\n        trowIsValid: false,\r\n        loading: false\r\n    }\r\n\r\n \r\n  render() {\r\n\r\n     const trowElementsArray = [];\r\n        for (let key in this.state.tablerow) {\r\n            trowElementsArray.push({\r\n                id: key,\r\n                config: this.state.tablerow[key]\r\n            });\r\n        }\r\n        let trow = (\r\n           <tr>\r\n                {trowElementsArray.map(trowElement => (\r\n                  <td className={classes.td} key= {trowElement.id}> \r\n                    <Input \r\n                        key={trowElement.id}\r\n                        elementType={trowElement.config.elementType}\r\n                        elementConfig={trowElement.config.elementConfig}\r\n                        value={trowElement.config.value}\r\n                        invalid={!trowElement.config.valid}\r\n                        shouldValidate={trowElement.config.validation}\r\n                        touched={trowElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, trowElement.id)} /> </td>\r\n                ))}\r\n                <td><button onClick={(event) => this.removeRow(event, trow)}>X</button></td>\r\n              \r\n           </tr>    \r\n           \r\n        );\r\n         return (\r\n            <>\r\n              \r\n                {trow}\r\n            </>\r\n        );\r\n\r\n  }\r\n\r\n}\r\nexport default ItemRow;"]},"metadata":{},"sourceType":"module"}