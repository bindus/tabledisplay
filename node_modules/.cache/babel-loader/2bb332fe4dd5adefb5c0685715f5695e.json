{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReactJS\\\\tabledisplay\\\\src\\\\components\\\\Table\\\\ItemTable\\\\ItemRow\\\\ItemRow.js\";\nimport React, { Component } from 'react';\nimport classes from '../../../Button/Button.css';\nimport Input from '../../../Input/Input';\n\nfunction EdittableCell(props) {\n  return React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: props.cellData.type,\n    id: props.cellData.id,\n    value: props.cellData.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }));\n}\n\n;\n\nclass ItemRow extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tablerow: {\n        item: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'testvalue1',\n              displayValue: 'testvalue1'\n            }, {\n              value: 'testvalue2',\n              displayValue: 'testvalue2'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        },\n        materialfee: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: '0'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        packingfee: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: '0'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        unpackingfee: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: '0'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.tablerow) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.tablerow[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default ItemRow;","map":{"version":3,"sources":["C:/ReactJS/tabledisplay/src/components/Table/ItemTable/ItemRow/ItemRow.js"],"names":["React","Component","classes","Input","EdittableCell","props","cellData","type","id","value","ItemRow","state","tablerow","item","elementType","elementConfig","options","displayValue","validation","valid","materialfee","placeholder","required","touched","packingfee","minLength","maxLength","isNumeric","unpackingfee","formIsValid","loading","render","formElementsArray","key","push","config","form","orderHandler","map","formElement","event","inputChangedHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from '../../../Button/Button.css';\r\nimport Input from '../../../Input/Input';\r\n\r\n\r\n\r\nfunction EdittableCell(props) {\r\n   return (\r\n    <td >\r\n        <input type='text' name={props.cellData.type} id={props.cellData.id} value={props.cellData.value}/>\r\n      </td>\r\n  );\r\n};\r\n\r\nclass ItemRow extends Component {\r\n\r\n\r\n    state = {\r\n        tablerow: {\r\n            item: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'testvalue1', displayValue: 'testvalue1'},\r\n                        {value: 'testvalue2', displayValue: 'testvalue2'}\r\n                    ]\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: true\r\n            },\r\n            materialfee: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: '0'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            packingfee: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: '0'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            unpackingfee: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: '0'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n            },                    \r\n        formIsValid: false,\r\n        loading: false\r\n    }\r\n\r\n \r\n  render() {\r\n\r\n     const formElementsArray = [];\r\n        for (let key in this.state.tablerow) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.tablerow[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n               \r\n            </form>\r\n        );\r\n         return (\r\n            <div >\r\n              \r\n                {form}\r\n            </div>\r\n        );\r\n\r\n  }\r\n\r\n}\r\nexport default ItemRow;"]},"metadata":{},"sourceType":"module"}